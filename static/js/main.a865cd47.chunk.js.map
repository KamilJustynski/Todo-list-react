{"version":3,"sources":["useTasks.js","Form/styled.js","Form/index.js","Tasks/styled.js","Tasks/index.js","Header/styled.js","Header/index.js","Buttons/styled.js","Buttons/index.js","Section/styled.js","Section/index.js","Main/styled.js","Main/index.js","App.js","reportWebVitals.js","index.js"],"names":["useTasks","_useState","useState","getTasksFromLocalStorage","_useState2","_slicedToArray","tasks","setTasks","localStorage","getItem","JSON","parse","useEffect","setItem","stringify","removeTask","id","filter","task","toggleTaskDone","map","_objectSpread","done","setAllDone","addNewTask","content","concat","_toConsumableArray","length","FormContainer","styled","form","_templateObject","_taggedTemplateLiteral","FormInput","input","_templateObject2","FormButton","button","_templateObject3","Form","_ref","newTaskContent","setNewTaskContent","React","createElement","onSubmit","event","preventDefault","contentTrimmed","trim","value","required","placeholder","onChange","_ref2","target","List","ul","Item","li","hidden","css","Content","span","_templateObject4","_templateObject5","Button","_templateObject6","_ref3","toggleDone","_templateObject7","_ref4","remove","_templateObject8","Tasks","hideDone","key","onClick","MainHeader","header","HeaderTitle","h1","Header","title","ButtonsContainer","div","Key","disabled","Buttons","toggleHideDone","Fragment","every","SectionContainer","section","SectionBox","SectionHeader","h2","Section","body","extraHeaderContent","MainContainer","main","Main","children","App","setHideDone","_useTasks","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.a865cd47.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst useTasks = () => {\r\n  const [tasks, setTasks] = useState(getTasksFromLocalStorage);\r\n\r\n  const getTasksFromLocalStorage = () => {\r\n    const tasks = localStorage.getItem(\"tasks\");\r\n    return tasks ? JSON.parse(tasks) : [];\r\n  };\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n  }, [tasks]);\r\n\r\n  const removeTask = (id) => {\r\n    setTasks((tasks) => tasks.filter((task) => task.id !== id));\r\n  };\r\n\r\n  const toggleTaskDone = (id) => {\r\n    setTasks((tasks) =>\r\n      tasks.map((task) => {\r\n        if (task.id === id) {\r\n          return { ...task, done: !task.done };\r\n        }\r\n\r\n        return task;\r\n      })\r\n    );\r\n  };\r\n\r\n  const setAllDone = () => {\r\n    setTasks((tasks) => tasks.map((task) => ({ ...task, done: true })));\r\n  };\r\n\r\n  const addNewTask = (content) => {\r\n    setTasks((tasks) => [\r\n      ...tasks,\r\n      {\r\n        content,\r\n        done: false,\r\n        id: tasks.length === 0 ? 1 : tasks[tasks.length - 1].id + 1,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  return { tasks, removeTask, toggleTaskDone, setAllDone, addNewTask };\r\n};\r\nexport default useTasks;\r\n","import styled from \"styled-components\";\r\n\r\nexport const FormContainer = styled.form`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  grid-gap: 20px;\r\n  padding: 20px;\r\n\r\n  @media (max-width: 600px) {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nexport const FormInput = styled.input`\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n`;\r\n\r\nexport const FormButton = styled.button`\r\n  border: none;\r\n  background-color: teal;\r\n  color: white;\r\n  padding: 10px 20px;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    background-color: hsl(180, 100%, 30%);\r\n    transform: scale(1.1);\r\n    transition: all 0.2s;\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport { FormContainer, FormInput, FormButton } from \"./styled\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    const contentTrimmed = newTaskContent.trim();\r\n    if (contentTrimmed.trim() === \"\") {\r\n      return;\r\n    }\r\n    addNewTask(contentTrimmed);\r\n    setNewTaskContent(\"\");\r\n  };\r\n\r\n  return (\r\n    <FormContainer onSubmit={onFormSubmit}>\r\n      <FormInput\r\n        value={newTaskContent}\r\n        required\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        onChange={({ target }) => setNewTaskContent(target.value)}\r\n      />\r\n      <FormButton>Dodaj zadanie</FormButton>\r\n    </FormContainer>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n  padding: 30px 10px;\r\n  margin: 0px;\r\n  list-style: none;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  display: grid;\r\n  grid-template-columns: auto 1fr auto;\r\n  grid-gap: 10px;\r\n  padding: 15px;\r\n  align-items: center;\r\n  border-bottom: 1px solid #ddd;\r\n\r\n  ${({ hidden }) =>\r\n    hidden &&\r\n    css`\r\n      display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n  ${({ done }) =>\r\n    done &&\r\n    css`\r\n      text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  width: 35px;\r\n  height: 35px;\r\n  color: white;\r\n  border: none;\r\n\r\n  ${({ toggleDone }) =>\r\n    toggleDone &&\r\n    css`\r\n      background-color: green;\r\n\r\n      &:hover {\r\n        background-color: hsl(120, 100%, 30%);\r\n        transition: 0.2s;\r\n        cursor: pointer;\r\n      }\r\n    `}\r\n\r\n  ${({ remove }) =>\r\n    remove &&\r\n    css`\r\n      background-color: red;\r\n\r\n      &:hover {\r\n        background-color: hsl(0, 100%, 65%);\r\n        transition: 0.2s;\r\n        cursor: pointer;\r\n      }\r\n    `}\r\n`;\r\n","import React from \"react\";\r\nimport { List, Item, Content, Button } from \"./styled\";\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n  <List>\r\n    {tasks.map((task) => (\r\n      <Item key={task.id} hidden={task.done && hideDone}>\r\n        <Button toggleDone onClick={() => toggleTaskDone(task.id)}>\r\n          {task.done ? \"✔\" : \"\"}\r\n        </Button>\r\n        <Content done={task.done}>\r\n          {task.id}. {task.content}\r\n        </Content>\r\n        <Button remove onClick={() => removeTask(task.id)}>\r\n          🗑\r\n        </Button>\r\n      </Item>\r\n    ))}\r\n  </List>\r\n);\r\n\r\nexport default Tasks;\r\n","import styled from \"styled-components\";\r\n\r\nexport const MainHeader = styled.header`\r\n  @media (max-width: 600px) {\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nexport const HeaderTitle = styled.h1`\r\n  justify-content: flex-start;\r\n`;\r\n","import React from \"react\";\r\nimport { HeaderTitle, MainHeader } from \"./styled\";\r\n\r\nconst Header = ({ title }) => (\r\n  <MainHeader>\r\n    <HeaderTitle>{title}</HeaderTitle>\r\n  </MainHeader>\r\n);\r\n\r\nexport default Header;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport const ButtonsContainer = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 20px;\r\n\r\n  @media (max-width: 600px) {\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nexport const Key = styled.button`\r\n  border: none;\r\n  background-color: white;\r\n  color: teal;\r\n  cursor: pointer;\r\n\r\n  ${({ disabled }) =>\r\n    disabled &&\r\n    css`\r\n      color: #ccc;\r\n      transition: 0.2s;\r\n      cursor: auto;\r\n    `}\r\n\r\n  &:hover {\r\n    color: hsl(180, 100%, 35%);\r\n    transition: 0.2s;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { ButtonsContainer, Key } from \"./styled\";\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\r\n  <ButtonsContainer>\r\n    {tasks.length > 0 && (\r\n      <>\r\n        <Key onClick={toggleHideDone}>\r\n          {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n        </Key>\r\n        <Key disabled={tasks.every(({ done }) => done)} onClick={setAllDone}>\r\n          Ukończ wszystkie\r\n        </Key>\r\n      </>\r\n    )}\r\n  </ButtonsContainer>\r\n);\r\n\r\nexport default Buttons;\r\n","import styled from \"styled-components\";\r\n\r\nexport const SectionContainer = styled.section`\r\n  background-color: white;\r\n  margin: 20px 0;\r\n`;\r\n\r\nexport const SectionBox = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  border-bottom: 1px solid #ddd;\r\n  padding: 20px;\r\n  margin: 0;\r\n\r\n  @media (max-width: 600px) {\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    row-gap: 20px;\r\n  }\r\n`;\r\n\r\nexport const SectionHeader = styled.h2``;\r\n","import React from \"react\";\r\nimport { SectionContainer, SectionBox, SectionHeader } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <SectionContainer>\r\n    <SectionBox>\r\n      <SectionHeader>{title}</SectionHeader>\r\n      {extraHeaderContent}\r\n    </SectionBox>\r\n    {body}\r\n  </SectionContainer>\r\n);\r\n\r\nexport default Section;\r\n","import styled from \"styled-components\";\r\n\r\nexport const MainContainer = styled.main`\r\n  margin: 50px auto;\r\n  max-width: 1000px;\r\n  word-break: break-word;\r\n\r\n  @media (max-width: 600px) {\r\n    margin: 20px;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { MainContainer } from \"./styled\";\r\n\r\nconst Main = ({ children }) => <MainContainer>{children}</MainContainer>;\r\n\r\nexport default Main;\r\n","import React, { useState } from \"react\";\nimport useTasks from \"./useTasks\";\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Header from \"./Header\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Main from \"./Main\";\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n\n  const {\n    tasks,\n    removeTask,\n    toggleTaskDone,\n    setAllDone,\n    addNewTask,\n  } = useTasks();\n\n  const toggleHideDone = () => {\n    setHideDone((hideDone) => !hideDone);\n  };\n\n  return (\n    <Main>\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form addNewTask={addNewTask} />}\n      />\n      <Section\n        title=\"Lista zadań\"\n        body={\n          <Tasks\n            toggleTaskDone={toggleTaskDone}\n            removeTask={removeTask}\n            tasks={tasks}\n            hideDone={hideDone}\n          />\n        }\n        extraHeaderContent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />\n        }\n      />\n    </Main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}